// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AadIdentityInitParameters struct {
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AadIdentityObservation struct {
	Identity *string `json:"identity,omitempty" tf:"identity,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AadIdentityParameters struct {

	// +kubebuilder:validation:Optional
	Identity *string `json:"identity" tf:"identity,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UserInitParameters struct {

	// Required when auth_plugin is aad_auth. This should be block containing type and identity. type can be one of user, group and service_principal. identity then should containt either UPN of user, name of group or Client ID of service principal.
	AadIdentity []AadIdentityInitParameters `json:"aadIdentity,omitempty" tf:"aad_identity,omitempty"`

	// Use an already hashed string as a parameter to auth_plugin. This can be used with passwords as well as with other auth strings.
	AuthStringHashedSecretRef *v1.SecretKeySelector `json:"authStringHashedSecretRef,omitempty" tf:"-"`

	// Deprecated alias of plaintext_password, whose value is stored as plaintext in state. Prefer to use plaintext_password instead, which stores the password as an unsalted hash. Conflicts with auth_plugin.
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The password for the user. This must be provided in plain text, so the data source for it must be secured. An unsalted hash of the provided password is stored in state. Conflicts with auth_plugin.
	PlaintextPasswordSecretRef *v1.SecretKeySelector `json:"plaintextPasswordSecretRef,omitempty" tf:"-"`

	// When true, the old password is retained when changing the password. Defaults to false. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See MySQL Dual Password documentation for more.
	RetainOldPassword *bool `json:"retainOldPassword,omitempty" tf:"retain_old_password,omitempty"`

	// An TLS-Option for the CREATE USER or ALTER USER statement. The value is suffixed to REQUIRE. A value of 'SSL' will generate a CREATE USER ... REQUIRE SSL statement. See the MYSQL  for more. Ignored if MySQL version is under 5.7.0.
	TLSOption *string `json:"tlsOption,omitempty" tf:"tls_option,omitempty"`
}

type UserObservation struct {

	// Required when auth_plugin is aad_auth. This should be block containing type and identity. type can be one of user, group and service_principal. identity then should containt either UPN of user, name of group or Client ID of service principal.
	AadIdentity []AadIdentityObservation `json:"aadIdentity,omitempty" tf:"aad_identity,omitempty"`

	// Use an authentication plugin to authenticate the user instead of using password authentication.  Description of the fields allowed in the block below. Conflicts with password and plaintext_password.
	AuthPlugin *string `json:"authPlugin,omitempty" tf:"auth_plugin,omitempty"`

	// The source host of the user. Defaults to "localhost".
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// The id of the user created, composed as "username@host".
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// When true, the old password is retained when changing the password. Defaults to false. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See MySQL Dual Password documentation for more.
	RetainOldPassword *bool `json:"retainOldPassword,omitempty" tf:"retain_old_password,omitempty"`

	// An TLS-Option for the CREATE USER or ALTER USER statement. The value is suffixed to REQUIRE. A value of 'SSL' will generate a CREATE USER ... REQUIRE SSL statement. See the MYSQL  for more. Ignored if MySQL version is under 5.7.0.
	TLSOption *string `json:"tlsOption,omitempty" tf:"tls_option,omitempty"`
}

type UserParameters struct {

	// Required when auth_plugin is aad_auth. This should be block containing type and identity. type can be one of user, group and service_principal. identity then should containt either UPN of user, name of group or Client ID of service principal.
	// +kubebuilder:validation:Optional
	AadIdentity []AadIdentityParameters `json:"aadIdentity,omitempty" tf:"aad_identity,omitempty"`

	// Use an already hashed string as a parameter to auth_plugin. This can be used with passwords as well as with other auth strings.
	// +kubebuilder:validation:Optional
	AuthStringHashedSecretRef *v1.SecretKeySelector `json:"authStringHashedSecretRef,omitempty" tf:"-"`

	// The source host of the user. Defaults to "localhost".
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// Deprecated alias of plaintext_password, whose value is stored as plaintext in state. Prefer to use plaintext_password instead, which stores the password as an unsalted hash. Conflicts with auth_plugin.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The password for the user. This must be provided in plain text, so the data source for it must be secured. An unsalted hash of the provided password is stored in state. Conflicts with auth_plugin.
	// +kubebuilder:validation:Optional
	PlaintextPasswordSecretRef *v1.SecretKeySelector `json:"plaintextPasswordSecretRef,omitempty" tf:"-"`

	// When true, the old password is retained when changing the password. Defaults to false. This use MySQL Dual Password Support feature and requires MySQL version 8.0.14 or newer. See MySQL Dual Password documentation for more.
	// +kubebuilder:validation:Optional
	RetainOldPassword *bool `json:"retainOldPassword,omitempty" tf:"retain_old_password,omitempty"`

	// An TLS-Option for the CREATE USER or ALTER USER statement. The value is suffixed to REQUIRE. A value of 'SSL' will generate a CREATE USER ... REQUIRE SSL statement. See the MYSQL  for more. Ignored if MySQL version is under 5.7.0.
	// +kubebuilder:validation:Optional
	TLSOption *string `json:"tlsOption,omitempty" tf:"tls_option,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// User is the Schema for the Users API. Creates and manages a user on a MySQL server.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mysql}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
