// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GrantInitParameters struct {

	// The database to grant privileges on.
	// +crossplane:generate:reference:type=github.com/jellysmack-tech/provider-mysql/apis/mysql/v1alpha1.Database
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a Database in mysql to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a Database in mysql to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant *bool `json:"grant,omitempty" tf:"grant,omitempty"`

	// The source host of the user. Defaults to "localhost". Conflicts with role.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// A list of privileges to grant to the user. Refer to a list of privileges (such as here) for applicable privileges. Conflicts with roles.
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The role to grant privileges to. Conflicts with user and host.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// A list of roles to grant to the user. Conflicts with privileges.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// An TLS-Option for the GRANT statement. The value is suffixed to REQUIRE. A value of 'SSL' will generate a GRANT ... REQUIRE SSL statement. See the MYSQL  for more. Ignored if MySQL version is under 5.7.0.
	TLSOption *string `json:"tlsOption,omitempty" tf:"tls_option,omitempty"`

	// Which table to grant privileges on. Defaults to *, which is all tables.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// The name of the user. Conflicts with role.
	// +crossplane:generate:reference:type=github.com/jellysmack-tech/provider-mysql/apis/mysql/v1alpha1.User
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User in mysql to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User in mysql to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type GrantObservation struct {

	// The database to grant privileges on.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Whether to also give the user privileges to grant the same privileges to other users.
	Grant *bool `json:"grant,omitempty" tf:"grant,omitempty"`

	// The source host of the user. Defaults to "localhost". Conflicts with role.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A list of privileges to grant to the user. Refer to a list of privileges (such as here) for applicable privileges. Conflicts with roles.
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The role to grant privileges to. Conflicts with user and host.
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// A list of roles to grant to the user. Conflicts with privileges.
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// An TLS-Option for the GRANT statement. The value is suffixed to REQUIRE. A value of 'SSL' will generate a GRANT ... REQUIRE SSL statement. See the MYSQL  for more. Ignored if MySQL version is under 5.7.0.
	TLSOption *string `json:"tlsOption,omitempty" tf:"tls_option,omitempty"`

	// Which table to grant privileges on. Defaults to *, which is all tables.
	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// The name of the user. Conflicts with role.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type GrantParameters struct {

	// The database to grant privileges on.
	// +crossplane:generate:reference:type=github.com/jellysmack-tech/provider-mysql/apis/mysql/v1alpha1.Database
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a Database in mysql to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a Database in mysql to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Whether to also give the user privileges to grant the same privileges to other users.
	// +kubebuilder:validation:Optional
	Grant *bool `json:"grant,omitempty" tf:"grant,omitempty"`

	// The source host of the user. Defaults to "localhost". Conflicts with role.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// A list of privileges to grant to the user. Refer to a list of privileges (such as here) for applicable privileges. Conflicts with roles.
	// +kubebuilder:validation:Optional
	// +listType=set
	Privileges []*string `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// The role to grant privileges to. Conflicts with user and host.
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// A list of roles to grant to the user. Conflicts with privileges.
	// +kubebuilder:validation:Optional
	// +listType=set
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`

	// An TLS-Option for the GRANT statement. The value is suffixed to REQUIRE. A value of 'SSL' will generate a GRANT ... REQUIRE SSL statement. See the MYSQL  for more. Ignored if MySQL version is under 5.7.0.
	// +kubebuilder:validation:Optional
	TLSOption *string `json:"tlsOption,omitempty" tf:"tls_option,omitempty"`

	// Which table to grant privileges on. Defaults to *, which is all tables.
	// +kubebuilder:validation:Optional
	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// The name of the user. Conflicts with role.
	// +crossplane:generate:reference:type=github.com/jellysmack-tech/provider-mysql/apis/mysql/v1alpha1.User
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User in mysql to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User in mysql to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

// GrantSpec defines the desired state of Grant
type GrantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GrantParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GrantInitParameters `json:"initProvider,omitempty"`
}

// GrantStatus defines the observed state of Grant.
type GrantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Grant is the Schema for the Grants API. Creates and manages privileges given to a user on a MySQL server
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,mysql}
type Grant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GrantSpec   `json:"spec"`
	Status            GrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GrantList contains a list of Grants
type GrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Grant `json:"items"`
}

// Repository type metadata.
var (
	Grant_Kind             = "Grant"
	Grant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Grant_Kind}.String()
	Grant_KindAPIVersion   = Grant_Kind + "." + CRDGroupVersion.String()
	Grant_GroupVersionKind = CRDGroupVersion.WithKind(Grant_Kind)
)

func init() {
	SchemeBuilder.Register(&Grant{}, &GrantList{})
}
